//
//  PractitionerTests.swift
//  PractitionerTests
//
//  Generated from FHIR 0.0.81.2382 on 2014-09-16.
//  Copyright (c) 2014 SMART Platforms. All rights reserved.
//

import Cocoa
import XCTest
import SwiftFHIR


class PractitionerTests: FHIRModelTestCase
{
	func instantiateFrom(filename: String) -> Practitioner? {
		let json = readJSONFile(filename)
		let instance = Practitioner(json: json)
		XCTAssertNotNil(instance, "Must have instantiated a test instance")
		return instance
	}
	
	func testPractitioner1() {
		let inst = instantiateFrom("practitioner-example-f001-evdb.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Den Burg")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Galapagosweg 91")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "9105 PZ")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1975-12-07")!)	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "M")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Male")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "http://hl7.org/fhir/v3/AdministrativeGender"))
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "938273695")
		XCTAssertEqual(inst!.identifier![1].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.6.3"))	
		XCTAssertEqual(inst!.identifier![1].use!, "usual")	
		XCTAssertEqual(inst!.identifier![1].value!, "129IDH4OP733")	
		XCTAssertEqual(inst!.name!.family![0], "van den broek")	
		XCTAssertEqual(inst!.name!.given![0], "Eric")	
		XCTAssertEqual(inst!.name!.suffix![0], "MD")	
		XCTAssertEqual(inst!.name!.use!, "official")	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "01.000")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Arts")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.role![0].text!, "Care role")	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "01.018")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Ear-, Nose and Throat")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.specialty![0].text!, "specialisation")	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "0205568263")	
		XCTAssertEqual(inst!.telecom![1].system!, "email")	
		XCTAssertEqual(inst!.telecom![1].use!, "work")	
		XCTAssertEqual(inst!.telecom![1].value!, "E.M.vandenbroek@bmc.nl")	
		XCTAssertEqual(inst!.telecom![2].system!, "fax")	
		XCTAssertEqual(inst!.telecom![2].use!, "work")	
		XCTAssertEqual(inst!.telecom![2].value!, "0205664440")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: 938273695 (official), 129IDH4OP733 (usual)\n      </p>\n      <p>\n        <b>name</b>: Eric van den broek (official)\n      </p>\n      <p>\n        <b>telecom</b>: ph: 0205568263(work), E.M.vandenbroek@bmc.nl(work), fax: 0205664440(work)\n      </p>\n      <p>\n        <b>address</b>: Galapagosweg 91 Den Burg 9105 PZ NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {http://hl7.org/fhir/v3/AdministrativeGender M}\">Male</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 7-Dec 1975\n      </p>\n      <p>\n        <b>organization</b>: BMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.000}\">Care role</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.018}\">specialisation</span>\n      </p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner2() {
		let inst = instantiateFrom("practitioner-example-f002-pv.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Den Burg")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Galapagosweg 91")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "9105 PZ")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1979-04-29")!)	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "M")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Male")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.4.642.1.24"))
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "730291637")
		XCTAssertEqual(inst!.identifier![1].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.6.3"))	
		XCTAssertEqual(inst!.identifier![1].use!, "usual")	
		XCTAssertEqual(inst!.identifier![1].value!, "174BIP3JH438")	
		XCTAssertEqual(inst!.name!.family![0], "Voigt")	
		XCTAssertEqual(inst!.name!.given![0], "Pieter")	
		XCTAssertEqual(inst!.name!.suffix![0], "MD")	
		XCTAssertEqual(inst!.name!.use!, "official")	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "01.000")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Arts")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.role![0].text!, "Care role")	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "01.011")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Cardiothoracal surgery")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.specialty![0].text!, "specialisation")	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "0205569336")	
		XCTAssertEqual(inst!.telecom![1].system!, "email")	
		XCTAssertEqual(inst!.telecom![1].use!, "work")	
		XCTAssertEqual(inst!.telecom![1].value!, "p.voigt@bmc.nl")	
		XCTAssertEqual(inst!.telecom![2].system!, "fax")	
		XCTAssertEqual(inst!.telecom![2].use!, "work")	
		XCTAssertEqual(inst!.telecom![2].value!, "0205669382")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: 730291637 (official), 174BIP3JH438 (usual)\n      </p>\n      <p>\n        <b>name</b>: Pieter Voigt (official)\n      </p>\n      <p>\n        <b>telecom</b>: ph: 0205569336(work), p.voigt@bmc.nl(work), fax: 0205669382(work)\n      </p>\n      <p>\n        <b>address</b>: Galapagosweg 91 Den Burg 9105 PZ NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.4.642.1.24 M}\">Male</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 29-Apr 1979\n      </p>\n      <p>\n        <b>organization</b>: BMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.000}\">Care role</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.011}\">specialisation</span>\n      </p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner3() {
		let inst = instantiateFrom("practitioner-example-f003-mv.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Amsterdam")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Galapagosweg 91")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "1105 AZ")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1963-07-01")!)	
		XCTAssertEqual(inst!.communication![0].coding![0].code!, "nl")	
		XCTAssertEqual(inst!.communication![0].coding![0].display!, "Dutch")
		XCTAssertEqual(inst!.communication![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.6.121"))	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "M")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Male")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.4.642.1.24"))
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "846100293")
		XCTAssertEqual(inst!.identifier![1].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.6.3"))	
		XCTAssertEqual(inst!.identifier![1].use!, "usual")	
		XCTAssertEqual(inst!.identifier![1].value!, "243HID3RT938")	
		XCTAssertEqual(inst!.name!.family![0], "Versteegh")	
		XCTAssertEqual(inst!.name!.given![0], "Marc")	
		XCTAssertEqual(inst!.name!.suffix![0], "MD")	
		XCTAssertEqual(inst!.name!.use!, "official")	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "01.000")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Arts")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.role![0].text!, "Care role")	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "01.011")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Cardiothoracal surgery")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.specialty![0].text!, "specialisation")	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "0205562431")	
		XCTAssertEqual(inst!.telecom![1].system!, "email")	
		XCTAssertEqual(inst!.telecom![1].use!, "work")	
		XCTAssertEqual(inst!.telecom![1].value!, "m.versteegh@bmc.nl")	
		XCTAssertEqual(inst!.telecom![2].system!, "fax")	
		XCTAssertEqual(inst!.telecom![2].use!, "work")	
		XCTAssertEqual(inst!.telecom![2].value!, "0205662948")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: 846100293 (official), 243HID3RT938 (usual)\n      </p>\n      <p>\n        <b>name</b>: Marc Versteegh (official)\n      </p>\n      <p>\n        <b>telecom</b>: ph: 0205562431(work), m.versteegh@bmc.nl(work), fax: 0205662948(work)\n      </p>\n      <p>\n        <b>address</b>: Galapagosweg 91 Amsterdam 1105 AZ NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.4.642.1.24 M}\">Male</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 1-Jul 1963\n      </p>\n      <p>\n        <b>organization</b>: BMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.000}\">Care role</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.011}\">specialisation</span>\n      </p>\n      <p>\n        <b>communication</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.6.121 nl}\">Dutch</span>\n      </p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner4() {
		let inst = instantiateFrom("practitioner-example-f004-rb.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Amsterdam")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Galapagosweg 91")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "1105 AZ")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1980-02-04")!)	
		XCTAssertEqual(inst!.communication![0].coding![0].code!, "nl")	
		XCTAssertEqual(inst!.communication![0].coding![0].display!, "Netherlands")
		XCTAssertEqual(inst!.communication![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.6.121"))	
		XCTAssertEqual(inst!.communication![0].text!, "Language")	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "M")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Male")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.4.642.1.24"))
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "118265112")
		XCTAssertEqual(inst!.identifier![1].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.6.3"))	
		XCTAssertEqual(inst!.identifier![1].use!, "usual")	
		XCTAssertEqual(inst!.identifier![1].value!, "523ASA1LK927")	
		XCTAssertEqual(inst!.name!.family![0], "Briet")	
		XCTAssertEqual(inst!.name!.given![0], "Ronald")	
		XCTAssertEqual(inst!.name!.suffix![0], "MD")	
		XCTAssertEqual(inst!.name!.use!, "official")	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "01.000")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Arts")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.role![0].text!, "Care role")	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "01.018")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Ear-, Nose and Throat")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.specialty![0].text!, "specialisation")	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "0205569273")	
		XCTAssertEqual(inst!.telecom![1].system!, "email")	
		XCTAssertEqual(inst!.telecom![1].use!, "work")	
		XCTAssertEqual(inst!.telecom![1].value!, "r.briet@bmc.nl")	
		XCTAssertEqual(inst!.telecom![2].system!, "fax")	
		XCTAssertEqual(inst!.telecom![2].use!, "work")	
		XCTAssertEqual(inst!.telecom![2].value!, "0205664440")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: 118265112 (official), 523ASA1LK927 (usual)\n      </p>\n      <p>\n        <b>name</b>: Ronald Briet (official)\n      </p>\n      <p>\n        <b>telecom</b>: ph: 0205569273(work), r.briet@bmc.nl(work), fax: 0205664440(work)\n      </p>\n      <p>\n        <b>address</b>: Galapagosweg 91 Amsterdam 1105 AZ NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.4.642.1.24 M}\">Male</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 4-Feb 1980\n      </p>\n      <p>\n        <b>organization</b>: BMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.000}\">Care role</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.018}\">specialisation</span>\n      </p>\n      <p>\n        <b>communication</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.6.121 nl}\">Language</span>\n      </p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner5() {
		let inst = instantiateFrom("practitioner-example-f005-al.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Amsterdam")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Galapagosweg 9")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "1105 AZ")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1959-03-11")!)	
		XCTAssertEqual(inst!.communication![0].coding![0].code!, "fr")	
		XCTAssertEqual(inst!.communication![0].coding![0].display!, "France")
		XCTAssertEqual(inst!.communication![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.6.121"))	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "F")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Female")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.4.642.1.24"))
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "118265112")
		XCTAssertEqual(inst!.identifier![1].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.6.3"))	
		XCTAssertEqual(inst!.identifier![1].use!, "usual")	
		XCTAssertEqual(inst!.identifier![1].value!, "191REW8WE916")	
		XCTAssertEqual(inst!.name!.family![0], "Anne")	
		XCTAssertEqual(inst!.name!.given![0], "Langeveld")	
		XCTAssertEqual(inst!.name!.suffix![0], "MD")	
		XCTAssertEqual(inst!.name!.use!, "official")	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "01.000")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Arts")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.role![0].text!, "Care role")	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "01.018")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Keel- neus- en oorarts")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.specialty![0].text!, "specialisation")	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "0205563847")	
		XCTAssertEqual(inst!.telecom![1].system!, "email")	
		XCTAssertEqual(inst!.telecom![1].use!, "work")	
		XCTAssertEqual(inst!.telecom![1].value!, "a.langeveld@bmc.nl")	
		XCTAssertEqual(inst!.telecom![2].system!, "fax")	
		XCTAssertEqual(inst!.telecom![2].use!, "work")	
		XCTAssertEqual(inst!.telecom![2].value!, "0205668916")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: 118265112 (official), 191REW8WE916 (usual)\n      </p>\n      <p>\n        <b>name</b>: Langeveld Anne (official)\n      </p>\n      <p>\n        <b>telecom</b>: ph: 0205563847(work), a.langeveld@bmc.nl(work), fax: 0205668916(work)\n      </p>\n      <p>\n        <b>address</b>: Galapagosweg 9 Amsterdam 1105 AZ NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.4.642.1.24 F}\">Female</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 11-Mar 1959\n      </p>\n      <p>\n        <b>organization</b>: BMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.000}\">Care role</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.018}\">specialisation</span>\n      </p>\n      <p>\n        <b>communication</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.6.121 fr}\">France</span>\n      </p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner6() {
		let inst = instantiateFrom("practitioner-example-f006-rvdb.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Den Burg")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Galapagosweg 91")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "9105 PZ")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1975-12-07")!)	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "M")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Male")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "http://hl7.org/fhir/v3/AdministrativeGender"))
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "937223645")
		XCTAssertEqual(inst!.identifier![1].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.6.3"))	
		XCTAssertEqual(inst!.identifier![1].use!, "usual")	
		XCTAssertEqual(inst!.identifier![1].value!, "134IDY41W988")	
		XCTAssertEqual(inst!.name!.family![0], "van den Berk")	
		XCTAssertEqual(inst!.name!.given![0], "Rob")	
		XCTAssertEqual(inst!.name!.suffix![0], "MD")	
		XCTAssertEqual(inst!.name!.use!, "official")	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "01.000")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Arts")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.role![0].text!, "Care role")	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "17.000")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Pharmacist")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.specialty![0].text!, "specialisation")	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "0205569288")	
		XCTAssertEqual(inst!.telecom![1].system!, "email")	
		XCTAssertEqual(inst!.telecom![1].use!, "work")	
		XCTAssertEqual(inst!.telecom![1].value!, "R.A.vandenberk@bmc.nl")	
		XCTAssertEqual(inst!.telecom![2].system!, "fax")	
		XCTAssertEqual(inst!.telecom![2].use!, "work")	
		XCTAssertEqual(inst!.telecom![2].value!, "0205664987")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: 937223645 (official), 134IDY41W988 (usual)\n      </p>\n      <p>\n        <b>name</b>: Rob van den Berk (official)\n      </p>\n      <p>\n        <b>telecom</b>: ph: 0205569288(work), R.A.vandenberk@bmc.nl(work), fax: 0205664987(work)\n      </p>\n      <p>\n        <b>address</b>: Galapagosweg 91 Den Burg 9105 PZ NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {http://hl7.org/fhir/v3/AdministrativeGender M}\">Male</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 7-Dec 1975\n      </p>\n      <p>\n        <b>organization</b>: BMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.000}\">Care role</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 17.000}\">specialisation</span>\n      </p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner7() {
		let inst = instantiateFrom("practitioner-example-f007-sh.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Den Burg")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Galapagosweg 91")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "9105 PZ")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1971-11-07")!)	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "F")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Female")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "http://hl7.org/fhir/v3/AdministrativeGender"))
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "874635264")
		XCTAssertEqual(inst!.identifier![1].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.6.3"))	
		XCTAssertEqual(inst!.identifier![1].use!, "usual")	
		XCTAssertEqual(inst!.identifier![1].value!, "567IUI51C154")	
		XCTAssertEqual(inst!.name!.family![0], "Heps")	
		XCTAssertEqual(inst!.name!.given![0], "Simone")	
		XCTAssertEqual(inst!.name!.suffix![0], "MD")	
		XCTAssertEqual(inst!.name!.use!, "official")	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "01.000")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Arts")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.role![0].text!, "Care role")	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "01.015")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Physician")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "urn:oid:2.16.840.1.113883.2.4.15.111"))	
		XCTAssertEqual(inst!.specialty![0].text!, "specialisation")	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "020556936")	
		XCTAssertEqual(inst!.telecom![1].system!, "email")	
		XCTAssertEqual(inst!.telecom![1].use!, "work")	
		XCTAssertEqual(inst!.telecom![1].value!, "S.M.Heps@bmc.nl")	
		XCTAssertEqual(inst!.telecom![2].system!, "fax")	
		XCTAssertEqual(inst!.telecom![2].use!, "work")	
		XCTAssertEqual(inst!.telecom![2].value!, "0205669283")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: 874635264 (official), 567IUI51C154 (usual)\n      </p>\n      <p>\n        <b>name</b>: Simone Heps (official)\n      </p>\n      <p>\n        <b>telecom</b>: ph: 020556936(work), S.M.Heps@bmc.nl(work), fax: 0205669283(work)\n      </p>\n      <p>\n        <b>address</b>: Galapagosweg 91 Den Burg 9105 PZ NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {http://hl7.org/fhir/v3/AdministrativeGender F}\">Female</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 7-Nov 1971\n      </p>\n      <p>\n        <b>organization</b>: BMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.000}\">Care role</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {urn:oid:2.16.840.1.113883.2.4.15.111 01.015}\">specialisation</span>\n      </p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner8() {
		let inst = instantiateFrom("practitioner-example-f201-ab.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Den helder")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Walvisbaai 3")	
		XCTAssertEqual(inst!.address!.line![1], "C4 - Automatisering")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "2333ZA")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1956-12-24")!)	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "248153007")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Male")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.identifier![0].label!, "UZI-nummer")
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "12345678901")	
		XCTAssertEqual(inst!.name!.family![0], "Bronsig")	
		XCTAssertEqual(inst!.name!.given![0], "Arend")	
		XCTAssertEqual(inst!.name!.prefix![0], "Dr.")	
		XCTAssertEqual(inst!.name!.text!, "Dokter Bronsig")	
		XCTAssertEqual(inst!.name!.use!, "official")	
		XCTAssertEqual(inst!.qualification![0].code!.coding![0].code!, "41672002")	
		XCTAssertEqual(inst!.qualification![0].code!.coding![0].display!, "Pulmonologist")
		XCTAssertEqual(inst!.qualification![0].code!.coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "225304007")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Implementation of planned interventions")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "310512001")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Medical oncologist")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "+31715269111")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: UZI-nummer = 12345678901 (official)\n      </p>\n      <p>\n        <b>name</b>: Dokter Bronsig(official)\n      </p>\n      <p>\n        <b>telecom</b>: ph: +31715269111(work)\n      </p>\n      <p>\n        <b>address</b>: Walvisbaai 3 C4 - Automatisering Den helder 2333ZA NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {http://snomed.info/sct 248153007}\">Male</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 24-Dec 1956\n      </p>\n      <p>\n        <b>organization</b>: AUMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {http://snomed.info/sct 225304007}\">Implementation of planned interventions</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {http://snomed.info/sct 310512001}\">Medical oncologist</span>\n      </p>\n      <h3>Qualifications</h3>\n      <table class=\"grid\">\n        <tr>\n          <td>\n            <b>Code</b>\n          </td>\n          <td>\n            <b>Period</b>\n          </td>\n          <td>\n            <b>Issuer</b>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <span title=\"Codes: {http://snomed.info/sct 41672002}\">Pulmonologist</span>\n          </td>\n          <td> </td>\n          <td> </td>\n        </tr>\n      </table>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner9() {
		let inst = instantiateFrom("practitioner-example-f202-lm.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Den helder")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Walvisbaai 3")	
		XCTAssertEqual(inst!.address!.line![1], "C4 - Automatisering")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "2333ZA")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1960-06-12")!)	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "248153007")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Male")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.identifier![0].label!, "UZI-nummer")
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "12345678902")	
		XCTAssertEqual(inst!.identifier![1].label!, "BIG-nummer")
		XCTAssertEqual(inst!.identifier![1].system!, NSURL(string: "https://www.bigregister.nl/"))	
		XCTAssertEqual(inst!.identifier![1].use!, "official")	
		XCTAssertEqual(inst!.identifier![1].value!, "12345678902")	
		XCTAssertEqual(inst!.name!.family![0], "Maas")	
		XCTAssertEqual(inst!.name!.given![0], "Luigi")	
		XCTAssertEqual(inst!.name!.prefix![0], "Dr.")	
		XCTAssertEqual(inst!.name!.text!, "Luigi Maas")	
		XCTAssertEqual(inst!.name!.use!, "official")	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "33526004")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Electronic laboratory reporting")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "159285000")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Medical laboratory technician")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "+31715269111")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: UZI-nummer = 12345678902 (official), BIG-nummer = 12345678902 (official)\n      </p>\n      <p>\n        <b>name</b>: Luigi Maas(official)\n      </p>\n      <p>\n        <b>telecom</b>: ph: +31715269111(work)\n      </p>\n      <p>\n        <b>address</b>: Walvisbaai 3 C4 - Automatisering Den helder 2333ZA NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {http://snomed.info/sct 248153007}\">Male</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 12-Jun 1960\n      </p>\n      <p>\n        <b>organization</b>: AUMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {http://snomed.info/sct 33526004}\">Electronic laboratory reporting</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {http://snomed.info/sct 159285000}\">Medical laboratory technician</span>\n      </p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner10() {
		let inst = instantiateFrom("practitioner-example-f203-jvg.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Den helder")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Walvisbaai 3")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "2333ZA")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1983-04-20")!)	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "248153007")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Male")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.identifier![0].label!, "UZI-nummer")
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "12345678903")	
		XCTAssertEqual(inst!.identifier![1].label!, "BIG-nummer")
		XCTAssertEqual(inst!.identifier![1].system!, NSURL(string: "https://www.bigregister.nl/"))	
		XCTAssertEqual(inst!.identifier![1].use!, "official")	
		XCTAssertEqual(inst!.identifier![1].value!, "12345678903")	
		XCTAssertEqual(inst!.name!.text!, "Juri van Gelder")	
		XCTAssertEqual(inst!.name!.use!, "official")	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "36682004")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Physical therapist")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "410158009")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Assess physical therapist service")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "+31715269111")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: UZI-nummer = 12345678903 (official), BIG-nummer = 12345678903 (official)\n      </p>\n      <p>\n        <b>name</b>: Juri van Gelder(official)\n      </p>\n      <p>\n        <b>telecom</b>: ph: +31715269111(work)\n      </p>\n      <p>\n        <b>address</b>: Walvisbaai 3 Den helder 2333ZA NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {http://snomed.info/sct 248153007}\">Male</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 20-Apr 1983\n      </p>\n      <p>\n        <b>organization</b>: AUMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {http://snomed.info/sct 36682004}\">Physical therapist</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {http://snomed.info/sct 410158009}\">Assess physical therapist service</span>\n      </p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner11() {
		let inst = instantiateFrom("practitioner-example-f204-ce.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.address!.city!, "Den helder")	
		XCTAssertEqual(inst!.address!.country!, "NLD")	
		XCTAssertEqual(inst!.address!.line![0], "Walvisbaai 3")	
		XCTAssertEqual(inst!.address!.use!, "work")	
		XCTAssertEqual(inst!.address!.zip!, "2333ZA")
		XCTAssertEqual(inst!.birthDate!, NSDate.dateFromISOString("1967-11-05")!)	
		XCTAssertEqual(inst!.gender!.coding![0].code!, "248152002")	
		XCTAssertEqual(inst!.gender!.coding![0].display!, "Female")
		XCTAssertEqual(inst!.gender!.coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.identifier![0].label!, "UZI-nummer")
		XCTAssertEqual(inst!.identifier![0].system!, NSURL(string: "urn:oid:2.16.528.1.1007.3.1"))	
		XCTAssertEqual(inst!.identifier![0].use!, "official")	
		XCTAssertEqual(inst!.identifier![0].value!, "12345678904")	
		XCTAssertEqual(inst!.name!.text!, "Carla Espinosa")	
		XCTAssertEqual(inst!.name!.use!, "usual")	
		XCTAssertEqual(inst!.role![0].coding![0].code!, "224565004")	
		XCTAssertEqual(inst!.role![0].coding![0].display!, "Renal nurse")
		XCTAssertEqual(inst!.role![0].coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.specialty![0].coding![0].code!, "9632001")	
		XCTAssertEqual(inst!.specialty![0].coding![0].display!, "Nursing procedure")
		XCTAssertEqual(inst!.specialty![0].coding![0].system!, NSURL(string: "http://snomed.info/sct"))	
		XCTAssertEqual(inst!.telecom![0].system!, "phone")	
		XCTAssertEqual(inst!.telecom![0].use!, "work")	
		XCTAssertEqual(inst!.telecom![0].value!, "+31715262169")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>\n        <b>Generated Narrative</b>\n      </p>\n      <p>\n        <b>identifier</b>: UZI-nummer = 12345678904 (official)\n      </p>\n      <p>\n        <b>name</b>: Carla Espinosa\n      </p>\n      <p>\n        <b>telecom</b>: ph: +31715262169(work)\n      </p>\n      <p>\n        <b>address</b>: Walvisbaai 3 Den helder 2333ZA NLD (work)\n      </p>\n      <p>\n        <b>gender</b>: \n        <span title=\"Codes: {http://snomed.info/sct 248152002}\">Female</span>\n      </p>\n      <p>\n        <b>birthDate</b>: 5-Nov 1967\n      </p>\n      <p>\n        <b>organization</b>: AUMC\n      </p>\n      <p>\n        <b>role</b>: \n        <span title=\"Codes: {http://snomed.info/sct 224565004}\">Renal nurse</span>\n      </p>\n      <p>\n        <b>specialty</b>: \n        <span title=\"Codes: {http://snomed.info/sct 9632001}\">Nursing procedure</span>\n      </p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
	
	func testPractitioner12() {
		let inst = instantiateFrom("practitioner-example-xcda-author.json")
		XCTAssertNotNil(inst, "Must have instantiated a Practitioner instance")
		
		XCTAssertEqual(inst!.name!.family![0], "Dolin")	
		XCTAssertEqual(inst!.name!.given![0], "Bob")	
		XCTAssertEqual(inst!.name!.suffix![0], "MD")	
		XCTAssertEqual(inst!.text!.div!, "<div>\n      <p>Bob Dolin, MD</p>\n    </div>")	
		XCTAssertEqual(inst!.text!.status!, "generated")
	}
}
