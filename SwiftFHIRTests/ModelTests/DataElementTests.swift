//
//  DataElementTests.swift
//  DataElementTests
//
//  Generated from FHIR 0.4.0.3898 on 2014-12-20.
//  2014, SMART Platforms.
//

import Cocoa
import XCTest
import SwiftFHIR


class DataElementTests: FHIRModelTestCase
{
	func instantiateFrom(filename: String) -> DataElement? {
		let json = readJSONFile(filename)
		let instance = DataElement(json: json)
		XCTAssertNotNil(instance, "Must have instantiated a test instance")
		return instance
	}
	
	func testDataElement1() {
		let inst = instantiateFrom("dataelement-example.canonical.json")
		XCTAssertNotNil(inst, "Must have instantiated a DataElement instance")
	
		XCTAssertEqual(inst!.binding!.conformance!, "required")
		XCTAssertFalse(inst!.binding!.isExtensible!)
		XCTAssertEqual(inst!.binding!.valueSet!.reference!, "#2179414")
		XCTAssertEqual(inst!.category![0].coding![0].display!, "FBPP Pooled Database")
		XCTAssertEqual(inst!.category![0].coding![0].system!, NSURL(string: "http://unknown/FBPP")!)
		XCTAssertEqual(inst!.category![0].coding![1].display!, "Demographics")
		XCTAssertEqual(inst!.category![0].coding![1].system!, NSURL(string: "http://unknown/PhenX")!)
		XCTAssertEqual(inst!.category![0].coding![2].display!, "Pt. Administrative")
		XCTAssertEqual(inst!.category![0].coding![3].display!, "UAMS New CDEs")
		XCTAssertEqual(inst!.category![0].coding![4].display!, "Substance Abuse and ")
		XCTAssertEqual(inst!.category![0].coding![4].system!, NSURL(string: "http://unknown/PhenX")!)
		XCTAssertEqual(inst!.category![0].coding![5].display!, "CSAERS Adverse Event")
		XCTAssertEqual(inst!.category![0].coding![5].system!, NSURL(string: "http://unknown/Category")!)
		XCTAssertEqual(inst!.category![0].coding![6].display!, "Core: Tier 1")
		XCTAssertEqual(inst!.category![0].coding![6].system!, NSURL(string: "http://unknown/PhenX")!)
		XCTAssertEqual(inst!.category![0].coding![7].display!, "Case Report Forms")
		XCTAssertEqual(inst!.category![0].coding![7].system!, NSURL(string: "http://unknown/Category")!)
		XCTAssertEqual(inst!.category![0].coding![8].display!, "CSAERS Review Set")
		XCTAssertEqual(inst!.category![0].coding![8].system!, NSURL(string: "http://unknown/Category")!)
		XCTAssertEqual(inst!.category![0].coding![9].display!, "CIAF")
		XCTAssertEqual(inst!.category![0].coding![9].system!, NSURL(string: "http://unknown/Demonstration%20Applications")!)
		XCTAssertEqual(inst!.definition!, "The code representing the gender of a person.")
		XCTAssertEqual(inst!.identifier!.value!, "2179650")
		XCTAssertEqual(inst!.name!, "Gender Code")
		XCTAssertEqual(inst!.publisher!, "DCP")
		XCTAssertEqual(inst!.question!, "Gender")
		XCTAssertEqual(inst!.status!, "active")
		XCTAssertEqual(inst!.type!, "CodeableConcept")
		XCTAssertEqual(inst!.version!, "1.0")
	}
	
	func testDataElement2() {
		let inst = instantiateFrom("dataelement-example.canonical.json")
		XCTAssertNotNil(inst, "Must have instantiated a DataElement instance")
	
		XCTAssertEqual(inst!.binding!.conformance!, "required")
		XCTAssertFalse(inst!.binding!.isExtensible!)
		XCTAssertEqual(inst!.binding!.valueSet!.reference!, "#2179414")
		XCTAssertEqual(inst!.category![0].coding![0].display!, "FBPP Pooled Database")
		XCTAssertEqual(inst!.category![0].coding![0].system!, NSURL(string: "http://unknown/FBPP")!)
		XCTAssertEqual(inst!.category![0].coding![1].display!, "Demographics")
		XCTAssertEqual(inst!.category![0].coding![1].system!, NSURL(string: "http://unknown/PhenX")!)
		XCTAssertEqual(inst!.category![0].coding![2].display!, "Pt. Administrative")
		XCTAssertEqual(inst!.category![0].coding![3].display!, "UAMS New CDEs")
		XCTAssertEqual(inst!.category![0].coding![4].display!, "Substance Abuse and ")
		XCTAssertEqual(inst!.category![0].coding![4].system!, NSURL(string: "http://unknown/PhenX")!)
		XCTAssertEqual(inst!.category![0].coding![5].display!, "CSAERS Adverse Event")
		XCTAssertEqual(inst!.category![0].coding![5].system!, NSURL(string: "http://unknown/Category")!)
		XCTAssertEqual(inst!.category![0].coding![6].display!, "Core: Tier 1")
		XCTAssertEqual(inst!.category![0].coding![6].system!, NSURL(string: "http://unknown/PhenX")!)
		XCTAssertEqual(inst!.category![0].coding![7].display!, "Case Report Forms")
		XCTAssertEqual(inst!.category![0].coding![7].system!, NSURL(string: "http://unknown/Category")!)
		XCTAssertEqual(inst!.category![0].coding![8].display!, "CSAERS Review Set")
		XCTAssertEqual(inst!.category![0].coding![8].system!, NSURL(string: "http://unknown/Category")!)
		XCTAssertEqual(inst!.category![0].coding![9].display!, "CIAF")
		XCTAssertEqual(inst!.category![0].coding![9].system!, NSURL(string: "http://unknown/Demonstration%20Applications")!)
		XCTAssertEqual(inst!.definition!, "The code representing the gender of a person.")
		XCTAssertEqual(inst!.identifier!.value!, "2179650")
		XCTAssertEqual(inst!.name!, "Gender Code")
		XCTAssertEqual(inst!.publisher!, "DCP")
		XCTAssertEqual(inst!.question!, "Gender")
		XCTAssertEqual(inst!.status!, "active")
		XCTAssertEqual(inst!.type!, "CodeableConcept")
		XCTAssertEqual(inst!.version!, "1.0")
	}
	
	func testDataElement3() {
		let inst = instantiateFrom("dataelement-example.json")
		XCTAssertNotNil(inst, "Must have instantiated a DataElement instance")
	
		XCTAssertEqual(inst!.binding!.conformance!, "required")
		XCTAssertFalse(inst!.binding!.isExtensible!)
		XCTAssertEqual(inst!.binding!.valueSet!.reference!, "#2179414")
		XCTAssertEqual(inst!.category![0].coding![0].display!, "FBPP Pooled Database")
		XCTAssertEqual(inst!.category![0].coding![0].system!, NSURL(string: "http://unknown/FBPP")!)
		XCTAssertEqual(inst!.category![0].coding![1].display!, "Demographics")
		XCTAssertEqual(inst!.category![0].coding![1].system!, NSURL(string: "http://unknown/PhenX")!)
		XCTAssertEqual(inst!.category![0].coding![2].display!, "Pt. Administrative")
		XCTAssertEqual(inst!.category![0].coding![3].display!, "UAMS New CDEs")
		XCTAssertEqual(inst!.category![0].coding![4].display!, "Substance Abuse and ")
		XCTAssertEqual(inst!.category![0].coding![4].system!, NSURL(string: "http://unknown/PhenX")!)
		XCTAssertEqual(inst!.category![0].coding![5].display!, "CSAERS Adverse Event")
		XCTAssertEqual(inst!.category![0].coding![5].system!, NSURL(string: "http://unknown/Category")!)
		XCTAssertEqual(inst!.category![0].coding![6].display!, "Core: Tier 1")
		XCTAssertEqual(inst!.category![0].coding![6].system!, NSURL(string: "http://unknown/PhenX")!)
		XCTAssertEqual(inst!.category![0].coding![7].display!, "Case Report Forms")
		XCTAssertEqual(inst!.category![0].coding![7].system!, NSURL(string: "http://unknown/Category")!)
		XCTAssertEqual(inst!.category![0].coding![8].display!, "CSAERS Review Set")
		XCTAssertEqual(inst!.category![0].coding![8].system!, NSURL(string: "http://unknown/Category")!)
		XCTAssertEqual(inst!.category![0].coding![9].display!, "CIAF")
		XCTAssertEqual(inst!.category![0].coding![9].system!, NSURL(string: "http://unknown/Demonstration%20Applications")!)
		XCTAssertEqual(inst!.definition!, "The code representing the gender of a person.")
		XCTAssertEqual(inst!.identifier!.value!, "2179650")
		XCTAssertEqual(inst!.name!, "Gender Code")
		XCTAssertEqual(inst!.publisher!, "DCP")
		XCTAssertEqual(inst!.question!, "Gender")
		XCTAssertEqual(inst!.status!, "active")
		XCTAssertEqual(inst!.type!, "CodeableConcept")
		XCTAssertEqual(inst!.version!, "1.0")
	}
	
	func testDataElement4() {
		let inst = instantiateFrom("dataelement-labtestmaster-example.canonical.json")
		XCTAssertNotNil(inst, "Must have instantiated a DataElement instance")
	
		XCTAssertEqual(inst!.comments!, "Used to screen the integrity of the extrinsic and common pathways of coagulation and to monitor warfarin anticoagulation. ")
		XCTAssertEqual(inst!.definition!, "The PT test evaluates the extrinsic and common pathways of the coagulation cascade.")
		XCTAssertEqual(inst!.exampleDecimal!, NSDecimalNumber(string: "10.0"))
		XCTAssertEqual(inst!.identifier!.assigner!.display!, "Century Hospital Laboratory")
		XCTAssertEqual(inst!.identifier!.label!, "Prothrombin Time, PT")
		XCTAssertEqual(inst!.identifier!.period!.start!, NSDate.dateFromISOString("2011-05-19")!)
		XCTAssertEqual(inst!.identifier!.system!, NSURL(string: "htpp://www.CenturyHospital/Laboratory/DirectoryofServices")!)
		XCTAssertEqual(inst!.identifier!.value!, "11")
		XCTAssertEqual(inst!.mapping![0].comments!, "Version 2.48 or later")
		XCTAssertEqual(inst!.mapping![0].map!, "5964-2")
		XCTAssertEqual(inst!.mapping![0].name!, "LOINC")
		XCTAssertEqual(inst!.mapping![0].uri!, NSURL(string: "http://loinc.org/")!)
		XCTAssertEqual(inst!.name!, "Prothrombin Time")
		XCTAssertEqual(inst!.requirements!, "This test is orderable. A plasma specimen in a 3.2% sodium citrate blue top tube is required.")
		XCTAssertEqual(inst!.status!, "active")
		XCTAssertEqual(inst!.synonym![0], "Protime, PT")
		XCTAssertEqual(inst!.type!, "Decimal")
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].code!, "s")
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].display!, "second")
		XCTAssertTrue(inst!.unitsCodeableConcept!.coding![0].primary!)
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].system!, NSURL(string: "http:/unitsofmeasure.org")!)
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].valueSet!.display!, "UCUM")
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].valueSet!.reference!, "http:/unitsofmeasure.org/vs")
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].version!, "1.9")
		XCTAssertEqual(inst!.unitsCodeableConcept!.text!, "second")
	}
	
	func testDataElement5() {
		let inst = instantiateFrom("dataelement-labtestmaster-example.json")
		XCTAssertNotNil(inst, "Must have instantiated a DataElement instance")
	
		XCTAssertEqual(inst!.comments!, "Used to screen the integrity of the extrinsic and common pathways of coagulation and to monitor warfarin anticoagulation. ")
		XCTAssertEqual(inst!.definition!, "The PT test evaluates the extrinsic and common pathways of the coagulation cascade.")
		XCTAssertEqual(inst!.exampleDecimal!, NSDecimalNumber(string: "10.0"))
		XCTAssertEqual(inst!.identifier!.assigner!.display!, "Century Hospital Laboratory")
		XCTAssertEqual(inst!.identifier!.label!, "Prothrombin Time, PT")
		XCTAssertEqual(inst!.identifier!.period!.start!, NSDate.dateFromISOString("2011-05-19")!)
		XCTAssertEqual(inst!.identifier!.system!, NSURL(string: "htpp://www.CenturyHospital/Laboratory/DirectoryofServices")!)
		XCTAssertEqual(inst!.identifier!.value!, "11")
		XCTAssertEqual(inst!.mapping![0].comments!, "Version 2.48 or later")
		XCTAssertEqual(inst!.mapping![0].map!, "5964-2")
		XCTAssertEqual(inst!.mapping![0].name!, "LOINC")
		XCTAssertEqual(inst!.mapping![0].uri!, NSURL(string: "http://loinc.org/")!)
		XCTAssertEqual(inst!.name!, "Prothrombin Time")
		XCTAssertEqual(inst!.requirements!, "This test is orderable. A plasma specimen in a 3.2% sodium citrate blue top tube is required.")
		XCTAssertEqual(inst!.status!, "active")
		XCTAssertEqual(inst!.synonym![0], "Protime, PT")
		XCTAssertEqual(inst!.type!, "Decimal")
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].code!, "s")
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].display!, "second")
		XCTAssertTrue(inst!.unitsCodeableConcept!.coding![0].primary!)
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].system!, NSURL(string: "http:/unitsofmeasure.org")!)
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].valueSet!.display!, "UCUM")
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].valueSet!.reference!, "http:/unitsofmeasure.org/vs")
		XCTAssertEqual(inst!.unitsCodeableConcept!.coding![0].version!, "1.9")
		XCTAssertEqual(inst!.unitsCodeableConcept!.text!, "second")
	}
	
	func testDataElement6() {
		let inst = instantiateFrom("dataelement-sdc-profile-example.canonical.json")
		XCTAssertNotNil(inst, "Must have instantiated a DataElement instance")
	
		XCTAssertEqual(inst!.binding!.conformance!, "required")
		XCTAssertFalse(inst!.binding!.isExtensible!)
		XCTAssertEqual(inst!.binding!.valueSet!.reference!, "#de42")
		XCTAssertEqual(inst!.category![0].coding![0].code!, "Healthcare Event Reporting Form")
		XCTAssertEqual(inst!.category![0].coding![0].display!, "Patient safety event report - hospital: healthcare event reporting form")
		XCTAssertEqual(inst!.code![0].code!, "72143-1")
		XCTAssertTrue(inst!.code![0].primary!)
		XCTAssertEqual(inst!.code![0].system!, NSURL(string: "http://loinc.org")!)
		XCTAssertEqual(inst!.date!, NSDate.dateFromISOString("2012-10-21")!)
		XCTAssertEqual(inst!.definition!, "The patient's documented gender on arrival at the hospital. ")
		XCTAssertEqual(inst!.identifier!.system!, NSURL(string: "http://nlm.nih.gov/some_other_text/data_element_identifier")!)
		XCTAssertEqual(inst!.identifier!.value!, "DE42AHRQ")
		XCTAssertEqual(inst!.mapping![0].map!, "http://snomed.info/sct#116154003 | http://snomed.info/sct | 263495000")
		XCTAssertEqual(inst!.mapping![0].name!, "Structured Data Capture ObjectClass/Property")
		XCTAssertEqual(inst!.mapping![0].uri!, NSURL(string: "http://healthit.gov/sdc/objectclassproperty")!)
		XCTAssertEqual(inst!.name!, "Patient Gender")
		XCTAssertEqual(inst!.publisher!, "Agency for Healthcare Research and Quality (AHRQ)")
		XCTAssertEqual(inst!.question!, "Patient's Gender")
		XCTAssertEqual(inst!.requirements!, "AHRQ Healthcare Event Reporting Form Patient safety event report - hospital: healthcare event reporting form (HERF) - version 1.2 [AHRQ] https://www.psoppc.org/c/document_library/get_file?uuid=6034c5aa-ad07-4dbe-ab19-0b45fb160683&groupId=10218")
		XCTAssertEqual(inst!.status!, "draft")
		XCTAssertEqual(inst!.telecom![0].system!, "email")
		XCTAssertEqual(inst!.telecom![0].value!, "william.munier@ahrq.hhs.gov")
		XCTAssertEqual(inst!.type!, "dateTime")
		XCTAssertEqual(inst!.version!, "1.2")
	}
	
	func testDataElement7() {
		let inst = instantiateFrom("dataelement-sdc-profile-example.json")
		XCTAssertNotNil(inst, "Must have instantiated a DataElement instance")
	
		XCTAssertEqual(inst!.binding!.conformance!, "required")
		XCTAssertFalse(inst!.binding!.isExtensible!)
		XCTAssertEqual(inst!.binding!.valueSet!.reference!, "#de42")
		XCTAssertEqual(inst!.category![0].coding![0].code!, "Healthcare Event Reporting Form")
		XCTAssertEqual(inst!.category![0].coding![0].display!, "Patient safety event report - hospital: healthcare event reporting form")
		XCTAssertEqual(inst!.code![0].code!, "72143-1")
		XCTAssertTrue(inst!.code![0].primary!)
		XCTAssertEqual(inst!.code![0].system!, NSURL(string: "http://loinc.org")!)
		XCTAssertEqual(inst!.date!, NSDate.dateFromISOString("2012-10-21")!)
		XCTAssertEqual(inst!.definition!, "The patient's documented gender on arrival at the hospital. ")
		XCTAssertEqual(inst!.identifier!.system!, NSURL(string: "http://nlm.nih.gov/some_other_text/data_element_identifier")!)
		XCTAssertEqual(inst!.identifier!.value!, "DE42AHRQ")
		XCTAssertEqual(inst!.mapping![0].map!, "http://snomed.info/sct#116154003 | http://snomed.info/sct | 263495000")
		XCTAssertEqual(inst!.mapping![0].name!, "Structured Data Capture ObjectClass/Property")
		XCTAssertEqual(inst!.mapping![0].uri!, NSURL(string: "http://healthit.gov/sdc/objectclassproperty")!)
		XCTAssertEqual(inst!.name!, "Patient Gender")
		XCTAssertEqual(inst!.publisher!, "Agency for Healthcare Research and Quality (AHRQ)")
		XCTAssertEqual(inst!.question!, "Patient's Gender")
		XCTAssertEqual(inst!.requirements!, "AHRQ Healthcare Event Reporting Form Patient safety event report - hospital: healthcare event reporting form (HERF) - version 1.2 [AHRQ] https://www.psoppc.org/c/document_library/get_file?uuid=6034c5aa-ad07-4dbe-ab19-0b45fb160683&groupId=10218")
		XCTAssertEqual(inst!.status!, "draft")
		XCTAssertEqual(inst!.telecom![0].system!, "email")
		XCTAssertEqual(inst!.telecom![0].value!, "william.munier@ahrq.hhs.gov")
		XCTAssertEqual(inst!.type!, "dateTime")
		XCTAssertEqual(inst!.version!, "1.2")
	}
}
